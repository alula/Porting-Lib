//file:noinspection GroovyAssignabilityCheck
//file:noinspection GroovyAccessibility
plugins {
	id "fabric-loom" version "0.12-SNAPSHOT"
//	id "io.github.juuxel.loom-quiltflower" version "1.+" // Quiltflower, a better decompiler
//	id "org.quiltmc.quilt-mappings-on-loom" version "4.2.+" // Quilt Mappings, for parameters and javadoc. Also hashed mojmap.
//	id "io.github.p03w.machete" version "1.+" // automatic jar compressing on build
	id "org.ajoberstar.grgit" version "4.1.1"
	id "maven-publish"
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

ext.buildNumber = System.getenv('GITHUB_RUN_NUMBER')
def patch = buildNumber != null ? buildNumber : '99999'

version = version.replace("<patch>", patch)

if (grgit != null) {
	version += "+${grgit.getBranch().current().name}.${grgit.head().abbreviatedId}"
} else {
	version += "+custom_unknown"
}

repositories {
	mavenLocal()
	maven { url = "https://api.modrinth.com/maven" }
	maven { url = "https://maven.bai.lol" }
	maven { url = "https://maven.terraformersmc.com/releases/" }
	maven { url = "https://maven.parchmentmc.org" }
	maven { url = "https://maven.shedaniel.me/" }
	maven { url = "https://mvn.devos.one/releases/" }
	maven { url = "https://mvn.devos.one/snapshots/" }
	maven { url = "https://maven.wispforest.io" }
	maven { url = "https://cursemaven.com" }
	maven {
		url = "https://jitpack.io"
		content {
			includeGroup("com.github.Chocohead")
			includeGroup("com.github.LlamaLad7")
		}
	}
}

dependencies {
    // dev environment
	minecraft("com.mojang:minecraft:${project.minecraft_version}")
	mappings loom.layered {
//		it.addLayer(quiltMappings.mappings("org.quiltmc:quilt-mappings:1.18.2+build.22:v2")) // https://lambdaurora.dev/tools/import_quilt.html
//		it.parchment("org.parchmentmc.data:parchment-1.18.2:BLEEDING-20220313.132143-1@zip") // https://ldtteam.jfrog.io/ui/native/parchmentmc-public/org/parchmentmc/data/parchment-1.18.1/BLEEDING-SNAPSHOT
		it.officialMojangMappings {
			setNameSyntheticMembers(false)
		}
	}
	modImplementation("net.fabricmc:fabric-loader:${project.loader_version}")
	modLocalRuntime("maven.modrinth:lazydfu:0.1.2")
	modLocalRuntime("maven.modrinth:suggestionproviderfabric:1.0.1")
//	modLocalRuntime("mcjty.theoneprobe:theoneprobe-fabric:${top_version}")
//	modLocalRuntime("maven.modrinth:lithium:${project.lithium_version}")
	modLocalRuntime("maven.modrinth:vmp-fabric:${project.vmp_version}")
//	modLocalRuntime("maven.modrinth:iris:${project.iris_version}")
	modLocalRuntime("com.terraformersmc:modmenu:${project.modmenu_version}") { exclude group: "net.fabricmc"; exclude group: "net.fabricmc.fabric-api" }

	// dependencies
	modImplementation("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}")
	modImplementation(include("io.github.tropheusj:serialization-hooks:${project.serialization_hooks_version}"))
	modApi(include("me.alphamode:ForgeTags:${project.forge_tags_version}"))
	api(include("com.github.LlamaLad7:MixinExtras:0.0.10"))
	annotationProcessor(include("com.github.LlamaLad7:MixinExtras:0.0.10"))

	modApi(include("com.github.Chocohead:Fabric-ASM:v2.3"))
}

loom {
	accessWidenerPath = file("src/main/resources/porting_lib.accesswidener")

	sourceSets {
            main {
                resources {
                    srcDir("src/generated/resources")
                    exclude("src/generated/resources/.cache")
                }
            }
        }

        runs {
            datagen {
                client()

                name "Data Generation"
                vmArg "-Dfabric-api.datagen"
                vmArg "-Dfabric-api.datagen.output-dir=${file("src/generated/resources")}"
                vmArg "-Dfabric-api.datagen.modid=porting_lib"
                // from ae2

                runDir "build/datagen"
            }
        }
}

task buildOrPublish {
	group = "build"
	String mavenUser = System.getenv().MAVEN_USER
	if (mavenUser != null && !mavenUser.isEmpty()) {
		dependsOn(tasks.getByName("publish"))
		println "prepared for publish"
	} else {
		dependsOn(tasks.getByName("build"))
		println "prepared for build"
	}
}

processResources {
	Map<String, String> properties = new HashMap<>()
	properties.put("version", project.version)
	properties.put("loader_version", project.loader_version)
	properties.put("fabric_version", project.fabric_version)
	properties.put("minecraft_version", project.minecraft_version)
	properties.put("java_version", sourceCompatibility)
	properties.put("class_5124", project.wtf_gradle)

	properties.forEach((k, v) -> inputs.property(k, v))

	filesMatching("fabric.mod.json") {
		expand properties
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = Integer.parseInt(sourceCompatibility)
}

java {
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}" }
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	repositories {
		maven {
			url = "https://mvn.devos.one/${System.getenv().PUBLISH_SUFFIX}/"
			credentials {
				username = System.getenv().MAVEN_USER
				password = System.getenv().MAVEN_PASS
			}
			authentication {
				basic(BasicAuthentication)
			}
		}
	}
}
